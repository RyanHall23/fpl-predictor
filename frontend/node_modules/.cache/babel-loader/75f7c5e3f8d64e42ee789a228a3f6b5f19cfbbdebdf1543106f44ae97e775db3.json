{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nconst useTeamData = entryId => {\n  _s();\n  const [mainTeamData, setMainTeamData] = useState([]);\n  const [benchTeamData, setBenchTeamData] = useState([]);\n  const [selectedPlayer, setSelectedPlayer] = useState(null);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [isHighestPredictedTeam, setIsHighestPredictedTeam] = useState(false);\n\n  // Fetch highest predicted team from backend\n  const fetchHighestPredictedTeam = async () => {\n    try {\n      const response = await axios.get('/api/predicted-team');\n      const {\n        mainTeam,\n        bench\n      } = response.data;\n      const formatPlayer = player => ({\n        name: `${player.first_name} ${player.second_name}`,\n        team: player.team,\n        position: player.element_type,\n        predictedPoints: Math.round(player.ep_next),\n        code: player.code,\n        webName: player.web_name,\n        lastGwPoints: player.event_points,\n        inDreamteam: player.in_dreamteam,\n        totalPoints: player.total_points\n      });\n      setMainTeamData(mainTeam.map(formatPlayer));\n      setBenchTeamData(bench.map(formatPlayer));\n    } catch (error) {\n      console.error('Error fetching highest predicted team data:', error);\n    }\n  };\n\n  // ...existing fetchData for user's team remains unchanged...\n\n  // Only change toggleTeamView to use the backend for highest predicted team\n  const toggleTeamView = () => {\n    setIsHighestPredictedTeam(prev => !prev);\n    if (!isHighestPredictedTeam) {\n      fetchHighestPredictedTeam();\n    } else {\n      // Re-fetch user's team data\n      fetchData();\n    }\n  };\n\n  // ...rest of the hook remains unchanged...\n\n  return {\n    mainTeamData,\n    benchTeamData,\n    snackbarMessage,\n    calculateTotalPredictedPoints,\n    toggleTeamView,\n    isHighestPredictedTeam\n  };\n};\n_s(useTeamData, \"+OGQdgJdLWNTiTRvInOhgqfRKX8=\");\nexport default useTeamData;","map":{"version":3,"names":["useEffect","useState","useCallback","axios","useTeamData","entryId","_s","mainTeamData","setMainTeamData","benchTeamData","setBenchTeamData","selectedPlayer","setSelectedPlayer","snackbarMessage","setSnackbarMessage","isHighestPredictedTeam","setIsHighestPredictedTeam","fetchHighestPredictedTeam","response","get","mainTeam","bench","data","formatPlayer","player","name","first_name","second_name","team","position","element_type","predictedPoints","Math","round","ep_next","code","webName","web_name","lastGwPoints","event_points","inDreamteam","in_dreamteam","totalPoints","total_points","map","error","console","toggleTeamView","prev","fetchData","calculateTotalPredictedPoints"],"sources":["/home/rjhall/Development/fpl-predictor/frontend/src/hooks/useTeamData.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\n\nconst useTeamData = (entryId) => {\n  const [mainTeamData, setMainTeamData] = useState([]);\n  const [benchTeamData, setBenchTeamData] = useState([]);\n  const [selectedPlayer, setSelectedPlayer] = useState(null);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [isHighestPredictedTeam, setIsHighestPredictedTeam] = useState(false);\n\n  // Fetch highest predicted team from backend\n  const fetchHighestPredictedTeam = async () => {\n    try {\n      const response = await axios.get('/api/predicted-team');\n      const { mainTeam, bench } = response.data;\n      const formatPlayer = (player) => ({\n        name: `${player.first_name} ${player.second_name}`,\n        team: player.team,\n        position: player.element_type,\n        predictedPoints: Math.round(player.ep_next),\n        code: player.code,\n        webName: player.web_name,\n        lastGwPoints: player.event_points,\n        inDreamteam: player.in_dreamteam,\n        totalPoints: player.total_points,\n      });\n      setMainTeamData(mainTeam.map(formatPlayer));\n      setBenchTeamData(bench.map(formatPlayer));\n    } catch (error) {\n      console.error('Error fetching highest predicted team data:', error);\n    }\n  };\n\n  // ...existing fetchData for user's team remains unchanged...\n\n  // Only change toggleTeamView to use the backend for highest predicted team\n  const toggleTeamView = () => {\n    setIsHighestPredictedTeam((prev) => !prev);\n    if (!isHighestPredictedTeam) {\n      fetchHighestPredictedTeam();\n    } else {\n      // Re-fetch user's team data\n      fetchData();\n    }\n  };\n\n  // ...rest of the hook remains unchanged...\n\n  return {\n    mainTeamData,\n    benchTeamData,\n    snackbarMessage,\n    calculateTotalPredictedPoints,\n    toggleTeamView,\n    isHighestPredictedTeam,\n  };\n};\n\nexport default useTeamData;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,OAAO,IAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE3E;EACA,MAAMgB,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,qBAAqB,CAAC;MACvD,MAAM;QAAEC,QAAQ;QAAEC;MAAM,CAAC,GAAGH,QAAQ,CAACI,IAAI;MACzC,MAAMC,YAAY,GAAIC,MAAM,KAAM;QAChCC,IAAI,EAAE,GAAGD,MAAM,CAACE,UAAU,IAAIF,MAAM,CAACG,WAAW,EAAE;QAClDC,IAAI,EAAEJ,MAAM,CAACI,IAAI;QACjBC,QAAQ,EAAEL,MAAM,CAACM,YAAY;QAC7BC,eAAe,EAAEC,IAAI,CAACC,KAAK,CAACT,MAAM,CAACU,OAAO,CAAC;QAC3CC,IAAI,EAAEX,MAAM,CAACW,IAAI;QACjBC,OAAO,EAAEZ,MAAM,CAACa,QAAQ;QACxBC,YAAY,EAAEd,MAAM,CAACe,YAAY;QACjCC,WAAW,EAAEhB,MAAM,CAACiB,YAAY;QAChCC,WAAW,EAAElB,MAAM,CAACmB;MACtB,CAAC,CAAC;MACFnC,eAAe,CAACY,QAAQ,CAACwB,GAAG,CAACrB,YAAY,CAAC,CAAC;MAC3Cb,gBAAgB,CAACW,KAAK,CAACuB,GAAG,CAACrB,YAAY,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;;EAED;;EAEA;EACA,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3B/B,yBAAyB,CAAEgC,IAAI,IAAK,CAACA,IAAI,CAAC;IAC1C,IAAI,CAACjC,sBAAsB,EAAE;MAC3BE,yBAAyB,CAAC,CAAC;IAC7B,CAAC,MAAM;MACL;MACAgC,SAAS,CAAC,CAAC;IACb;EACF,CAAC;;EAED;;EAEA,OAAO;IACL1C,YAAY;IACZE,aAAa;IACbI,eAAe;IACfqC,6BAA6B;IAC7BH,cAAc;IACdhC;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CArDIF,WAAW;AAuDjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}